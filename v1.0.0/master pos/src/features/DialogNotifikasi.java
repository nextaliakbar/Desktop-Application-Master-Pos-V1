/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/AWTForms/Dialog.java to edit this template
 */
package features;
import javax.swing.JTable;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableCellRenderer;
import model.ModelNotifikasi;
import service.ServiceNotifikasi;

/**
 *
 * @author usER
 */
public class DialogNotifikasi extends java.awt.Dialog {

    /**
     * Creates new form DialogNotifikasi
     */
    private ServiceNotifikasi serviceNotifikasi = new ServiceNotifikasi();
    public DialogNotifikasi(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        tableNotif.scrollPane(scrollNotif);
        styleTable(tableNotif);
        loadAllNotifikasi();
    }
    
    private void styleTable(JTable table) {
        table.getTableHeader().setDefaultRenderer(headerTable());  
    }
    
    private void loadAllNotifikasi() {
        serviceNotifikasi.getAll().forEach((value)-> {
            tableNotif.addRow(new Object[]{value});                   
        });
    }
    
    private void loadAllByFilter() {
        ModelNotifikasi modelNotifikasi = new ModelNotifikasi();
        switch (cbxFilter.getSelectedIndex()) {
            case 0:
                loadAllNotifikasi();
                break;
            case 1:
                modelNotifikasi.setNamaNotifikasi("Perubahan Harga Beli Barang");
                loadAll(modelNotifikasi);
                break;
            case 2:
                modelNotifikasi.setNamaNotifikasi("Perubahan Harga Jual Barang");
                loadAll(modelNotifikasi);
                break;
            case 3:
                modelNotifikasi.setNamaNotifikasi("Perubahan Biaya Tindakan");
                loadAll(modelNotifikasi);
                break;
            case 4:
                modelNotifikasi.setNamaNotifikasi("Follow Up Pasien");
                loadAll(modelNotifikasi);
                break;
        }
    }
    
    private void loadAll(ModelNotifikasi modelNotifikasi) {
        tableNotif.setRowCount(0);
        serviceNotifikasi.getAllByFilter(modelNotifikasi).forEach((value)-> {
           tableNotif.addRow(new Object[]{value});
        });
    }
    
    private DefaultTableCellRenderer headerTable() {
        DefaultTableCellRenderer cellRender = new DefaultTableCellRenderer();
        cellRender.setOpaque(true);
        cellRender.setBorder(new EmptyBorder(0, 0, 0, 0));
        return cellRender;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        cbxFilter = new javax.swing.JComboBox<>();
        scrollNotif = new javax.swing.JScrollPane();
        tableNotif = new swing.TableNotifikasi();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainPanel.setForeground(new java.awt.Color(255, 255, 255));

        cbxFilter.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        cbxFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Semua", "Perubahan Harga Beli Barang", "Perubahan Harga Jual Barang", "Perubahan Biaya Tindakan", "Pemberitahuan Follow Up Pasien" }));
        cbxFilter.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(185, 185, 185)));
        cbxFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxFilterActionPerformed(evt);
            }
        });

        tableNotif.setForeground(new java.awt.Color(0, 0, 0));
        tableNotif.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                ""
            }
        ));
        tableNotif.setSelectionBackground(new java.awt.Color(185, 185, 185));
        scrollNotif.setViewportView(tableNotif);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollNotif, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(cbxFilter, 0, 336, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbxFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollNotif, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void cbxFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxFilterActionPerformed
        loadAllByFilter();
    }//GEN-LAST:event_cbxFilterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DialogNotifikasi dialog = new DialogNotifikasi(new java.awt.Frame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbxFilter;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JScrollPane scrollNotif;
    private swing.TableNotifikasi tableNotif;
    // End of variables declaration//GEN-END:variables
}
